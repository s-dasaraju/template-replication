#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Sep  7 18:33:19 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./stinit
match_max 100000
expect -exact "\r
\r
\r
Have you read the Software License Agreement?  It is located in the\r
file \"license.pdf\" in the root directory of your installation media.\r
Read it now.  By installing this software, you are agreeing that you\r
or the entity for whom you are installing the software accept the terms\r
of the License and will be bound by them.  If you do not agree to all\r
the terms of the License Agreement, do not proceed with the installation.\r
\r
Do you agree to the License terms?  Type Y or N and press enter:  "
send -- "y\r"
expect -exact "y\r
\r
\r
\r
Stata initialization ...\r
\r
You will need the printed LICENSE AND AUTHORIZATION KEY.  It has codes which\r
you must enter into the computer to unlock the software.\r
\r
I will verify that the codes you type make sense.  I will also ask you for\r
two lines (such as your name and affiliation) and, when I do, you will have\r
plenty of opportunity to verify what you enter is accurate.\r
\r
Do you wish to continue?  Type Y or N and press enter:  "
send -- "y\r"
expect -exact "y\r
\r
\r
\r
\r
\r
\r
Please enter your:\r
\r
       Serial number:  "
send -- "SN2483424"
expect -exact "SN2483424"
send -- "\r"
expect -exact "\r
                Code:  "
send -- "Code55381"
expect -exact "Code55381"
send -- "\r"
expect -exact "\r
       Authorization:  "
send -- "Auth82847"
expect -exact "Auth82847"
send -- "\r"
expect -exact "\r
Wait ...\r
\r
Good.  The serial number, code, and authorization make sense.\r
Shall we continue?  Type Y or N and press enter:  "
send -- "y\r"
expect -exact "y\r
\r
------------------------------------------------------------------------------\r
\r
\r
When Stata comes up, it will display:\r
\r
Serial number SN2483424 licensed to:\r
	<something will appear here>\r
	<something will appear here>\r
\r
I am about to ask you to fill in those two somethings.  These two lines will\r
also be written in certain system files Stata creates so that should you ever\r
send us something on magnetic media, we will know who it is from.\r
\r
If you are the primary user and have a 1- or 2-user license, make the first\r
line your name and the second your affiliation or address.  If you have a site\r
license, make the first line the name of your institution or company and the\r
second your city.\r
\r
Shall we continue?  Type Y or N and press enter:  "
send -- "y\r"
expect -exact "y\r
\r
Enter what you would like the first line to say:\r
"
send -- "None n/a\r"
expect -exact "None n/a\r
Enter what you would like the second line to say:\r
"
send -- "None n/a\r"
expect -exact "None n/a\r
\r
Serial number SN2483424 licensed to:\r
	None n/a\r
	None n/a\r
\r
Is this okay?  Type Y or N and press enter:  "
send -- "y\r"
expect eof
